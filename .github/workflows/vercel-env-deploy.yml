name: Vercel Env (write-only)

on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  sync-env:
    runs-on: ubuntu-latest
    env:
      VERCEL_TOKEN:   ${{ secrets.VERCEL_TOKEN }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      VERCEL_ORG_ID:  ${{ secrets.VERCEL_ORG_ID }}
      ORIGIN:         ${{ secrets.ORIGIN }}
      APPS_SCRIPT_URL:${{ secrets.APPS_SCRIPT_URL }}
      CFG_KEY:        ${{ secrets.CFG_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Define QS (teamId if provided)
        id: qs
        shell: bash
        run: |
          if [[ -n "${VERCEL_ORG_ID}" ]]; then
            echo "value=?teamId=${VERCEL_ORG_ID}" >> $GITHUB_OUTPUT
          else
            echo "value=" >> $GITHUB_OUTPUT
          fi

      - name: Who am I? (diagnostics)
        shell: bash
        run: |
          set -e
          curl -sS -H "Authorization: Bearer $VERCEL_TOKEN" https://api.vercel.com/v2/user | jq -r '.user.username,.user.email'

      - name: Get project by ID (diagnostics)
        shell: bash
        run: |
          set -e
          curl -sS -H "Authorization: Bearer $VERCEL_TOKEN" \
            "https://api.vercel.com/v9/projects/$VERCEL_PROJECT_ID${{ steps.qs.outputs.value }}" | jq -r '.name,.id'

      - name: Upsert envs (write-only, show body on error)
        shell: bash
        env:
          QS: ${{ steps.qs.outputs.value }}
        run: |
          set -e

          post_env () {
            local KEY="$1" VALUE="$2"
            if [[ -z "$VALUE" ]]; then
              echo "::warning::Secret $KEY is empty. Skipping."
              return 0
            fi

            # безопасно собираем JSON
            local PAYLOAD
            PAYLOAD=$(jq -n --arg k "$KEY" --arg v "$VALUE" \
              '{key:$k, value:$v, target:["production","preview"], type:"encrypted"}')

            # делаем запрос и забираем и тело, и статус
            local RESP
            RESP=$(curl -sS -X POST "https://api.vercel.com/v9/projects/$VERCEL_PROJECT_ID/env$QS" \
              -H "Authorization: Bearer $VERCEL_TOKEN" \
              -H "Content-Type: application/json" \
              --data "$PAYLOAD" \
              -w "\n%{http_code}")

            local STATUS="${RESP##*$'\n'}"
            local BODY="${RESP%$'\n'*}"

            if [[ "$STATUS" == "200" || "$STATUS" == "201" ]]; then
              echo "upsert $KEY: OK ($STATUS)"
              return 0
            fi

            # считать «дубликат» успехом (и для 409 и для 403)
            if [[ "$STATUS" == "409" || "$STATUS" == "403" ]]; then
              if echo "$BODY" | jq -e '.code=="ENV_ALREADY_EXISTS"' >/dev/null 2>&1; then
                echo "upsert $KEY: already exists — treating as OK"
                return 0
              fi
            fi

            echo "::error::upsert $KEY failed. HTTP $STATUS"
            echo "Response body:"
            echo "$BODY"
            exit 1
          }

          echo "Project=$VERCEL_PROJECT_ID  Org=$VERCEL_ORG_ID"

          post_env "ORIGIN"           "$ORIGIN"
          post_env "APPS_SCRIPT_URL"  "$APPS_SCRIPT_URL"
          post_env "CFG_KEY"          "$CFG_KEY"

          echo "Done"
