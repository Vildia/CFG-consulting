name: Vercel Env (write-only)

on:
  workflow_dispatch: {}
  push:
    paths:
      - .github/workflows/vercel-env-deploy.yml

jobs:
  sync-env:
    runs-on: ubuntu-latest
    timeout-minutes: 7

    env:
      VERCEL_TOKEN:        ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID:       ${{ secrets.VERCEL_ORG_ID }}
      # Укажите хотя бы ОДНО из двух (если есть оба, приоритет у имени):
      VERCEL_PROJECT_NAME: ${{ secrets.VERCEL_PROJECT_NAME }}
      VERCEL_PROJECT_ID:   ${{ secrets.VERCEL_PROJECT_ID }}

      CFG_KEY:             ${{ secrets.CFG_KEY }}
      APPS_SCRIPT_URL:     ${{ secrets.APPS_SCRIPT_URL }}
      ORIGIN:              ${{ secrets.ORIGIN }}
      ORIGIN_PREVIEW:      ${{ secrets.ORIGIN_PREVIEW }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install vercel CLI & python3
        run: |
          npm i -g vercel@latest
          sudo apt-get update -y
          sudo apt-get install -y python3

      - name: Resolve project flag (prefer NAME, fallback to ID)
        id: proj
        shell: bash
        run: |
          if [ -n "$VERCEL_PROJECT_NAME" ]; then
            echo "flag=--project \"$VERCEL_PROJECT_NAME\"" >> $GITHUB_OUTPUT
          elif [ -n "$VERCEL_PROJECT_ID" ]; then
            echo "flag=--project \"$VERCEL_PROJECT_ID\"" >> $GITHUB_OUTPUT
          else
            echo "Neither VERCEL_PROJECT_NAME nor VERCEL_PROJECT_ID provided" >&2
            exit 1
          fi

      # ---------- PRODUCTION ----------
      - name: Remove envs (production)
        shell: bash
        run: |
          set -e
          for K in CFG_KEY APPS_SCRIPT_URL ORIGIN ORIGIN_PREVIEW; do
            vercel env rm "$K" production --yes \
              --token "$VERCEL_TOKEN" --scope "$VERCEL_ORG_ID" ${{ steps.proj.outputs.flag }} || true
          done

      - name: Add envs (production)
        shell: bash
        run: |
          set -e
          # обязательные
          printf '%s' "$CFG_KEY"         | vercel env add CFG_KEY         production --force --token "$VERCEL_TOKEN" --scope "$VERCEL_ORG_ID" ${{ steps.proj.outputs.flag }}
          printf '%s' "$APPS_SCRIPT_URL" | vercel env add APPS_SCRIPT_URL production --force --token "$VERCEL_TOKEN" --scope "$VERCEL_ORG_ID" ${{ steps.proj.outputs.flag }}
          # опциональные
          if [ -n "$ORIGIN" ]; then
            printf '%s' "$ORIGIN"        | vercel env add ORIGIN          production --force --token "$VERCEL_TOKEN" --scope "$VERCEL_ORG_ID" ${{ steps.proj.outputs.flag }}
          fi
          if [ -n "$ORIGIN_PREVIEW" ]; then
            printf '%s' "$ORIGIN_PREVIEW" | vercel env add ORIGIN_PREVIEW production --force --token "$VERCEL_TOKEN" --scope "$VERCEL_ORG_ID" ${{ steps.proj.outputs.flag }}
          fi

      # ---------- PREVIEW (опционально) ----------
      - name: Remove envs (preview)
        if: env.ORIGIN_PREVIEW != ''
        shell: bash
        run: |
          set -e
          for K in CFG_KEY APPS_SCRIPT_URL ORIGIN ORIGIN_PREVIEW; do
            vercel env rm "$K" preview --yes \
              --token "$VERCEL_TOKEN" --scope "$VERCEL_ORG_ID" ${{ steps.proj.outputs.flag }} || true
          done

      - name: Add envs (preview)
        if: env.ORIGIN_PREVIEW != ''
        shell: bash
        run: |
          set -e
          printf '%s' "$CFG_KEY"         | vercel env add CFG_KEY         preview --force --token "$VERCEL_TOKEN" --scope "$VERCEL_ORG_ID" ${{ steps.proj.outputs.flag }}
          printf '%s' "$APPS_SCRIPT_URL" | vercel env add APPS_SCRIPT_URL preview --force --token "$VERCEL_TOKEN" --scope "$VERCEL_ORG_ID" ${{ steps.proj.outputs.flag }}
          printf '%s' "$ORIGIN_PREVIEW"  | vercel env add ORIGIN_PREVIEW  preview --force --token "$VERCEL_TOKEN" --scope "$VERCEL_ORG_ID" ${{ steps.proj.outputs.flag }}

      - name: Print key_id (diagnostic only)
        shell: bash
        run: |
          KEY_ID=$(python3 - <<'PY'
import os, hashlib
print(hashlib.sha256(os.environ.get('CFG_KEY','').encode()).hexdigest()[:12])
PY
)
          echo "key_id=${KEY_ID}"
